name: Tests

on:
  push:
  workflow_dispatch: {}

env:
  # Common versions
  GO_VERSION: "1.19"
  GOLANGCI_VERSION: "v1.50.0"
  DOCKER_BUILDX_VERSION: "v0.8.2"

jobs:
  detect-noop:
    runs-on: ubuntu-22.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'
  testsuite:
    runs-on: ubuntu-22.04
    needs: detect-noop
    env:
      KUBECONFIG_RAW: ${{ secrets.KUBECONFIG_RAW }}
      TAIKUN_EMAIL: ${{ secrets.TAIKUN_EMAIL }}
      TAIKUN_PASSWORD: ${{ secrets.TAIKUN_PASSWORD }}
      TAIKUN_USER: ${{ secrets.TAIKUN_USER }}
      PROVIDER_NAME: ${{ secrets.PROVIDER_NAME }}
      PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
      PROMETHEUS_USER: ${{ secrets.PROMETHEUS_USER }}
      OPENSTACK_CLOUD_USER: ${{ secrets.OPENSTACK_CLOUD_USER2 }}
      OPENSTACK_CLOUD_PASSWORD: ${{ secrets.OPENSTACK_CLOUD_PASSWORD2 }}
      PROMETHEUS_PASSWORD: ${{ secrets.PROMETHEUS_PASSWORD }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(make go.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-unit-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-unit-tests-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Kubectl Install
        uses: azure/setup-kubectl@v3
        with:
          version: "latest" # default is latest stable
        id: install

      - name: Setup Cluster Config
        run: |
          mkdir $HOME/.kube
          touch $HOME/.kube/config
          echo -n "${KUBECONFIG_RAW}" > $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          kubectl get all -n crossplane-system
      - name: Install Provider
        run: |
          export KUBECONFIG=$HOME/.kube/config
          make install
      - name: Run Acceptance Tests
        run: |
          export KUBECONFIG=$HOME/.kube/config
          make generate
          kubectl apply -f package/crds
          make testsuite
