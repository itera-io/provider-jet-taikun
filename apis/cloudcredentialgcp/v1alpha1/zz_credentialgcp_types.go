/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CredentialGCPObservation struct {
	BillingAccountName *string `json:"billingAccountName,omitempty" tf:"billing_account_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name,omitempty"`
}

type CredentialGCPParameters struct {

	// The ID of the GCP credential's billing account. Conflicts with: `import_project`.
	// +crossplane:generate:reference:type=github.com/nivraph/provider-jet-taikun/apis/billingcredential/v1alpha1.Credential
	// +kubebuilder:validation:Optional
	BillingAccountID *string `json:"billingAccountId,omitempty" tf:"billing_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	BillingAccountIDRef *v1.Reference `json:"billingAccountIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	BillingAccountIDSelector *v1.Selector `json:"billingAccountIdSelector,omitempty" tf:"-"`

	// The path of the GCP credential's configuration file.
	// +kubebuilder:validation:Required
	ConfigFile *string `json:"configFile" tf:"config_file,omitempty"`

	// The folder ID of the GCP credential. Conflicts with: `import_project`.
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Whether to import a project or not Defaults to `false`. Conflicts with: `billing_account_id`, `folder_id`.
	// +kubebuilder:validation:Optional
	ImportProject *bool `json:"importProject,omitempty" tf:"import_project,omitempty"`

	// Indicates whether to lock the GCP cloud credential. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Lock *bool `json:"lock,omitempty" tf:"lock,omitempty"`

	// The name of the GCP credential.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The ID of the organization which owns the GCP credential.
	// +crossplane:generate:reference:type=github.com/nivraph/provider-jet-taikun/apis/organization/v1alpha1.Organization
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// +kubebuilder:validation:Optional
	OrganizationIDRef *v1.Reference `json:"organizationIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	OrganizationIDSelector *v1.Selector `json:"organizationIdSelector,omitempty" tf:"-"`

	// The region of the GCP credential.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// The zone of the GCP credential.
	// +kubebuilder:validation:Required
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

// CredentialGCPSpec defines the desired state of CredentialGCP
type CredentialGCPSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CredentialGCPParameters `json:"forProvider"`
}

// CredentialGCPStatus defines the observed state of CredentialGCP.
type CredentialGCPStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CredentialGCPObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CredentialGCP is the Schema for the CredentialGCPs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,taikunjet}
type CredentialGCP struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CredentialGCPSpec   `json:"spec"`
	Status            CredentialGCPStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CredentialGCPList contains a list of CredentialGCPs
type CredentialGCPList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CredentialGCP `json:"items"`
}

// Repository type metadata.
var (
	CredentialGCP_Kind             = "CredentialGCP"
	CredentialGCP_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CredentialGCP_Kind}.String()
	CredentialGCP_KindAPIVersion   = CredentialGCP_Kind + "." + CRDGroupVersion.String()
	CredentialGCP_GroupVersionKind = CRDGroupVersion.WithKind(CredentialGCP_Kind)
)

func init() {
	SchemeBuilder.Register(&CredentialGCP{}, &CredentialGCPList{})
}
