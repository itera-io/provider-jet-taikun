/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KubeconfigObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`
}

type KubeconfigParameters struct {

	// Who can use the kubeconfig: `personal` (only you), `managers` (managers only) or `all` (all users with access to this project).
	// +kubebuilder:validation:Required
	AccessScope *string `json:"accessScope" tf:"access_scope,omitempty"`

	// The kubeconfig's name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The kubeconfig's namespace.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// ID of the kubeconfig's project.
	// +crossplane:generate:reference:type=github.com/itera-io/provider-jet-taikun/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The kubeconfig's role: `cluster-admin`, `admin`, `edit` or `view`.
	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// ID of the kubeconfig's user, if the kubeconfig is personal.
	// +crossplane:generate:reference:type=github.com/itera-io/provider-jet-taikun/apis/user/v1alpha1.User
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`

	// The kubeconfig's validity period in minutes. Unlimited (-1) by default. Defaults to `-1`.
	// +kubebuilder:validation:Optional
	ValidityPeriod *float64 `json:"validityPeriod,omitempty" tf:"validity_period,omitempty"`
}

// KubeconfigSpec defines the desired state of Kubeconfig
type KubeconfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KubeconfigParameters `json:"forProvider"`
}

// KubeconfigStatus defines the observed state of Kubeconfig.
type KubeconfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KubeconfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Kubeconfig is the Schema for the Kubeconfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,taikunjet}
type Kubeconfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KubeconfigSpec   `json:"spec"`
	Status            KubeconfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KubeconfigList contains a list of Kubeconfigs
type KubeconfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Kubeconfig `json:"items"`
}

// Repository type metadata.
var (
	Kubeconfig_Kind             = "Kubeconfig"
	Kubeconfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Kubeconfig_Kind}.String()
	Kubeconfig_KindAPIVersion   = Kubeconfig_Kind + "." + CRDGroupVersion.String()
	Kubeconfig_GroupVersionKind = CRDGroupVersion.WithKind(Kubeconfig_Kind)
)

func init() {
	SchemeBuilder.Register(&Kubeconfig{}, &KubeconfigList{})
}
