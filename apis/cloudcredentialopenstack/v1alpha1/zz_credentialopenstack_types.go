/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CredentialOpenstackObservation struct {

	// The creator of the OpenStack cloud credential.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates whether the OpenStack cloud credential is the default one.
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// Time and date of last modification.
	LastModified *string `json:"lastModified,omitempty" tf:"last_modified,omitempty"`

	// The last user to have modified the OpenStack cloud credential.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty" tf:"last_modified_by,omitempty"`

	// The name of the organization which owns the OpenStack cloud credential.
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name,omitempty"`

	// The OpenStack project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type CredentialOpenstackParameters struct {

	// The OpenStack availability zone.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The OpenStack domain.
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// The OpenStack network subnet ID to import a network.
	// +kubebuilder:validation:Optional
	ImportedNetworkSubnetID *string `json:"importedNetworkSubnetId,omitempty" tf:"imported_network_subnet_id,omitempty"`

	// Indicates whether to lock the OpenStack cloud credential. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Lock *bool `json:"lock,omitempty" tf:"lock,omitempty"`

	// The name of the OpenStack cloud credential.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The ID of the organization which owns the OpenStack cloud credential.
	// +crossplane:generate:reference:type=github.com/itera-io/provider-jet-taikun/apis/organization/v1alpha1.Organization
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// Reference to a Organization in organization to populate organizationId.
	// +kubebuilder:validation:Optional
	OrganizationIDRef *v1.Reference `json:"organizationIdRef,omitempty" tf:"-"`

	// Selector for a Organization in organization to populate organizationId.
	// +kubebuilder:validation:Optional
	OrganizationIDSelector *v1.Selector `json:"organizationIdSelector,omitempty" tf:"-"`

	// The OpenStack password.
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The OpenStack project name.
	// +kubebuilder:validation:Required
	ProjectName *string `json:"projectName" tf:"project_name,omitempty"`

	// The name of the public OpenStack network to use.
	// +kubebuilder:validation:Required
	PublicNetworkName *string `json:"publicNetworkName" tf:"public_network_name,omitempty"`

	// The OpenStack region.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// The OpenStack authentication URL.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// The OpenStack user.
	// +kubebuilder:validation:Required
	User *string `json:"user" tf:"user,omitempty"`

	// The OpenStack type of volume.
	// +kubebuilder:validation:Optional
	VolumeTypeName *string `json:"volumeTypeName,omitempty" tf:"volume_type_name,omitempty"`
}

// CredentialOpenstackSpec defines the desired state of CredentialOpenstack
type CredentialOpenstackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CredentialOpenstackParameters `json:"forProvider"`
}

// CredentialOpenstackStatus defines the observed state of CredentialOpenstack.
type CredentialOpenstackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CredentialOpenstackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CredentialOpenstack is the Schema for the CredentialOpenstacks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,taikunjet}
type CredentialOpenstack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CredentialOpenstackSpec   `json:"spec"`
	Status            CredentialOpenstackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CredentialOpenstackList contains a list of CredentialOpenstacks
type CredentialOpenstackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CredentialOpenstack `json:"items"`
}

// Repository type metadata.
var (
	CredentialOpenstack_Kind             = "CredentialOpenstack"
	CredentialOpenstack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CredentialOpenstack_Kind}.String()
	CredentialOpenstack_KindAPIVersion   = CredentialOpenstack_Kind + "." + CRDGroupVersion.String()
	CredentialOpenstack_GroupVersionKind = CRDGroupVersion.WithKind(CredentialOpenstack_Kind)
)

func init() {
	SchemeBuilder.Register(&CredentialOpenstack{}, &CredentialOpenstackList{})
}
